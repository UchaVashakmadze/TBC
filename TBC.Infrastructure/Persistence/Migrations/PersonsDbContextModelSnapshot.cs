// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TBC.Infrastructure.Persistence.Context;

namespace TBC.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PersonsDbContext))]
    partial class PersonsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TBC.Domain.AggregatesModel.CityAggregate.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Cities", "dbo");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.ToTable("Persons", "dbo");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.PersonAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddresses", "dbo");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonContactTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContacts", "dbo");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.PersonRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MainPersonId")
                        .HasColumnType("int");

                    b.Property<int>("PersonsRelationshipTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainPersonId");

                    b.HasIndex("PersonsRelationshipTypeId");

                    b.HasIndex("RelatedPersonId");

                    b.ToTable("PersonRelationships", "dbo");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonContactTypeAggregate.PersonContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PersonContactTypes", "dbo");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonsRalationshipTypeAggregate.PersonsRelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("PersonsRelationshipTypes", "dbo");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.Person", b =>
                {
                    b.OwnsOne("TBC.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Lastname")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LastName");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.PersonAddress", b =>
                {
                    b.HasOne("TBC.Domain.AggregatesModel.CityAggregate.City", "City")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBC.Domain.AggregatesModel.PersonAggregate.Person", "Person")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("City");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.PersonContact", b =>
                {
                    b.HasOne("TBC.Domain.AggregatesModel.PersonContactTypeAggregate.PersonContactType", "PersonContactType")
                        .WithMany("PersonContacts")
                        .HasForeignKey("PersonContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBC.Domain.AggregatesModel.PersonAggregate.Person", "Person")
                        .WithMany("PersonContacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Person");

                    b.Navigation("PersonContactType");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.PersonRelationship", b =>
                {
                    b.HasOne("TBC.Domain.AggregatesModel.PersonAggregate.Person", "MainPerson")
                        .WithMany("MainPersonRelationships")
                        .HasForeignKey("MainPersonId");

                    b.HasOne("TBC.Domain.AggregatesModel.PersonsRalationshipTypeAggregate.PersonsRelationshipType", "PersonsRelationshipType")
                        .WithMany("PersonsRelationships")
                        .HasForeignKey("PersonsRelationshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBC.Domain.AggregatesModel.PersonAggregate.Person", "RelatedPerson")
                        .WithMany("RelatedPersonRelationships")
                        .HasForeignKey("RelatedPersonId");

                    b.Navigation("MainPerson");

                    b.Navigation("PersonsRelationshipType");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.CityAggregate.City", b =>
                {
                    b.Navigation("PersonAddresses");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonAggregate.Person", b =>
                {
                    b.Navigation("MainPersonRelationships");

                    b.Navigation("PersonAddresses");

                    b.Navigation("PersonContacts");

                    b.Navigation("RelatedPersonRelationships");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonContactTypeAggregate.PersonContactType", b =>
                {
                    b.Navigation("PersonContacts");
                });

            modelBuilder.Entity("TBC.Domain.AggregatesModel.PersonsRalationshipTypeAggregate.PersonsRelationshipType", b =>
                {
                    b.Navigation("PersonsRelationships");
                });
#pragma warning restore 612, 618
        }
    }
}
